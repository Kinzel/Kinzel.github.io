{
# flat_html: é a página obtida pelo base::readLines
# sQualIndicador: qual indicador estamos atrás
# iQualNaSequencia: o indicador pode aparecer diversas vezes na pagina. Escolha em qual você está interessado.
iOnde_AproxIndicador = which(str_detect(flat_html, regex(sQualIndicador, ignore_case = T)))
iOnde_EstaoNegritos = which(str_detect(flat_html, "</strong>"))
sTexto = flat_html[iOnde_EstaoNegritos[iOnde_EstaoNegritos > iOnde_AproxIndicador[iQualNaSequencia]][1]]
iMarcadores = str_locate_all(sTexto, ">")[[1]][,1]
iOndeTermina = str_locate_all(sTexto, "</strong>")[[1]][1]
iOndeComeca = tail(subset(iMarcadores, iMarcadores < iOndeTermina),1)
sTexto_Quero = str_sub(sTexto, iOndeComeca + 1, iOndeTermina - 1)
if(length(sTexto_Quero)<1)sTexto_Quero = NA; ## não achou
return(sTexto_Quero)
}
PegarSetor = function(flat_html)
{
iOnde_AproxIndicador = which(str_detect(flat_html, regex(">Segmento</span>", ignore_case = T)))[1]
iOnde_BarraInversa = which(str_detect(flat_html, '\"'))
sTexto = flat_html[iOnde_BarraInversa[iOnde_BarraInversa > iOnde_AproxIndicador][1]]
iOnde_BarraDir = str_locate_all(sTexto, "/")[[1]]
## Procura por aspas
iOndeTermina = str_locate_all(sTexto, '"')[[1]][2]
iOnde_Comeca = tail(iOnde_BarraDir[iOnde_BarraDir < iOndeTermina],1)
sTexto_Quero = str_sub(sTexto, iOnde_Comeca + 1, iOndeTermina - 1)
return(sTexto_Quero)
}
scrape_url = "https://statusinvest.com.br/fundos-imobiliarios/xpml11"
flat_html = base::readLines(con = scrape_url, encoding="UTF-8")
PVP = PegarTextoNegrito(flat_html, "P/VP")
print(PVP)
Setor = PegarSetor(flat_html)
print(Setor)
## Poupar tempo na hora de ficar rodando toda vez na hora de criar a pagina
df_todos_fiis = df_todos_fiis_salvo1
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo2
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo3
df_todos_fiis = df_todos_fiis[!is.na(df_todos_fiis$Cotacao),]
df_todos_fiis$MM200Delta = scale(df_todos_fiis$MM200Delta, center = 0) * 100
head(df_todos_fiis)
Tabela_Dinamica = df_todos_fiis %>%
dplyr::group_by(Setor) %>%
dplyr::summarise(
n = n(),
DY12m_median = median(DY12m, na.rm=TRUE),
MM200Delta_median = median(MM200Delta, na.rm=TRUE)
) %>% dplyr::filter(n >= 2) %>% dplyr::arrange(desc(MM200Delta_median)) %>% print(n = Inf)
g = ggplot(Tabela_Dinamica, aes(x=DY12m_median, y=MM200Delta_median)) +
geom_point(size=2, shape=1) +
geom_text(label=Tabela_Dinamica$Setor, hjust=0.45, vjust=1.5) +
xlab('Dividend Yield') +
ylab('MM200Delta') +
geom_hline(yintercept=100, linetype="dashed",color = "black", size=0.5, alpha = .4) +
geom_vline(xintercept=5, linetype="dashed",color = "black", size=0.5, alpha = .4) +
coord_cartesian(xlim = c(0, 11))
print(g)
Tabela_Dinamica
save.image("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
knitr::opts_chunk$set(collapse = TRUE,
fig.retina = 2,
fig.align = 'center')
library(emo)
options(width = 180)
load("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
library(mt5R)
library(stringr)
library(dplyr)
MT5.Ping()
head(sTodosTickers)
length(sTodosTickers)
## Filtrar aqueles que verdadeiramente são FIIs
sTodosOsFIIs = sTodosTickers[bQuaisSaoFII]
head(sTodosOsFIIs)
length(sTodosOsFIIs)
PegarTextoNegrito = function(flat_html, sQualIndicador, iQualNaSequencia = 1)
{
# flat_html: é a página obtida pelo base::readLines
# sQualIndicador: qual indicador estamos atrás
# iQualNaSequencia: o indicador pode aparecer diversas vezes na pagina. Escolha em qual você está interessado.
iOnde_AproxIndicador = which(str_detect(flat_html, regex(sQualIndicador, ignore_case = T)))
iOnde_EstaoNegritos = which(str_detect(flat_html, "</strong>"))
sTexto = flat_html[iOnde_EstaoNegritos[iOnde_EstaoNegritos > iOnde_AproxIndicador[iQualNaSequencia]][1]]
iMarcadores = str_locate_all(sTexto, ">")[[1]][,1]
iOndeTermina = str_locate_all(sTexto, "</strong>")[[1]][1]
iOndeComeca = tail(subset(iMarcadores, iMarcadores < iOndeTermina),1)
sTexto_Quero = str_sub(sTexto, iOndeComeca + 1, iOndeTermina - 1)
if(length(sTexto_Quero)<1)sTexto_Quero = NA; ## não achou
return(sTexto_Quero)
}
PegarSetor = function(flat_html)
{
iOnde_AproxIndicador = which(str_detect(flat_html, regex(">Segmento</span>", ignore_case = T)))[1]
iOnde_BarraInversa = which(str_detect(flat_html, '\"'))
sTexto = flat_html[iOnde_BarraInversa[iOnde_BarraInversa > iOnde_AproxIndicador][1]]
iOnde_BarraDir = str_locate_all(sTexto, "/")[[1]]
## Procura por aspas
iOndeTermina = str_locate_all(sTexto, '"')[[1]][2]
iOnde_Comeca = tail(iOnde_BarraDir[iOnde_BarraDir < iOndeTermina],1)
sTexto_Quero = str_sub(sTexto, iOnde_Comeca + 1, iOndeTermina - 1)
return(sTexto_Quero)
}
scrape_url = "https://statusinvest.com.br/fundos-imobiliarios/xpml11"
flat_html = base::readLines(con = scrape_url, encoding="UTF-8")
PVP = PegarTextoNegrito(flat_html, "P/VP")
print(PVP)
Setor = PegarSetor(flat_html)
print(Setor)
## Poupar tempo na hora de ficar rodando toda vez na hora de criar a pagina
df_todos_fiis = df_todos_fiis_salvo1
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo2
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo3
df_todos_fiis = df_todos_fiis[!is.na(df_todos_fiis$Cotacao),]
df_todos_fiis$MM200Delta = scale(df_todos_fiis$MM200Delta, center = 0) * 100
head(df_todos_fiis)
Tabela_Dinamica = df_todos_fiis %>%
dplyr::group_by(Setor) %>%
dplyr::summarise(
n = n(),
DY12m_median = median(DY12m, na.rm=TRUE),
MM200Delta_median = median(MM200Delta, na.rm=TRUE)
) %>% dplyr::filter(n >= 2) %>% dplyr::arrange(desc(MM200Delta_median)) %>% print(n = Inf)
library(ggplot2)
g = ggplot(Tabela_Dinamica, aes(x=DY12m_median, y=MM200Delta_median)) +
geom_point(size=2, shape=1) +
geom_text(label=Tabela_Dinamica$Setor, hjust=0.45, vjust=1.5) +
xlab('Dividend Yield') +
ylab('MM200Delta') +
geom_hline(yintercept=100, linetype="dashed",color = "black", size=0.5, alpha = .4) +
geom_vline(xintercept=5, linetype="dashed",color = "black", size=0.5, alpha = .4) +
coord_cartesian(xlim = c(0, 11))
print(g)
blogdown::serve_site()
df_todos_fiis_salvo2[is.null(df_todos_fiis_salvo2$Vol)]
df_todos_fiis_salvo2[is.null(df_todos_fiis_salvo2$Vol),]
df_todos_fiis_salvo2[is.na(df_todos_fiis_salvo2$Vol),]
library(mt5R)
MT5.GetSymbol("BMII11", 1440, 5)
MT5.GetSymbol("BMII11", 1440, 5)
iCnt <- 0
while(TRUE)
{
Sys.sleep(0.01)
iCnt <- iCnt + 1
if(iCnt > iWait) return(NULL);
if(!file.exists(SFileDownloading))break;
}
Unprocessed_Table <- utils::read.table(sFile, sep = ';', col.names = c("Year", "Month", "Day", "Hour", "Minute", "Open", "High", "Low", "Close", "Volume"))
blogdown::build_site()
blogdown::serve_site()
knitr::opts_chunk$set(collapse = TRUE,
fig.retina = 2,
fig.align = 'center')
library(emo)
options(width = 180)
load("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
Tabela_Dinamica = df_todos_fiis %>%
dplyr::group_by(Setor) %>%
dplyr::summarise(.groups = 'drop',
n = n(),
DY12m_median = median(DY12m, na.rm=TRUE),
MM200Delta_median = median(MM200Delta, na.rm=TRUE)
) %>% dplyr::filter(n >= 2) %>% dplyr::arrange(desc(MM200Delta_median)) %>% print(n = Inf)
knitr::opts_chunk$set(collapse = TRUE,
fig.retina = 2,
fig.align = 'center')
library(emo)
options(width = 180)
load("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
library(mt5R)
library(stringr)
library(dplyr)
MT5.Ping()
head(sTodosTickers)
length(sTodosTickers)
## Filtrar aqueles que verdadeiramente são FIIs
sTodosOsFIIs = sTodosTickers[bQuaisSaoFII]
head(sTodosOsFIIs)
length(sTodosOsFIIs)
PegarTextoNegrito = function(flat_html, sQualIndicador, iQualNaSequencia = 1)
{
# flat_html: é a página obtida pelo base::readLines
# sQualIndicador: qual indicador estamos atrás
# iQualNaSequencia: o indicador pode aparecer diversas vezes na pagina. Escolha em qual você está interessado.
iOnde_AproxIndicador = which(str_detect(flat_html, regex(sQualIndicador, ignore_case = T)))
iOnde_EstaoNegritos = which(str_detect(flat_html, "</strong>"))
sTexto = flat_html[iOnde_EstaoNegritos[iOnde_EstaoNegritos > iOnde_AproxIndicador[iQualNaSequencia]][1]]
iMarcadores = str_locate_all(sTexto, ">")[[1]][,1]
iOndeTermina = str_locate_all(sTexto, "</strong>")[[1]][1]
iOndeComeca = tail(subset(iMarcadores, iMarcadores < iOndeTermina),1)
sTexto_Quero = str_sub(sTexto, iOndeComeca + 1, iOndeTermina - 1)
if(length(sTexto_Quero)<1)sTexto_Quero = NA; ## não achou
return(sTexto_Quero)
}
PegarSetor = function(flat_html)
{
iOnde_AproxIndicador = which(str_detect(flat_html, regex(">Segmento</span>", ignore_case = T)))[1]
iOnde_BarraInversa = which(str_detect(flat_html, '\"'))
sTexto = flat_html[iOnde_BarraInversa[iOnde_BarraInversa > iOnde_AproxIndicador][1]]
iOnde_BarraDir = str_locate_all(sTexto, "/")[[1]]
## Procura por aspas
iOndeTermina = str_locate_all(sTexto, '"')[[1]][2]
iOnde_Comeca = tail(iOnde_BarraDir[iOnde_BarraDir < iOndeTermina],1)
sTexto_Quero = str_sub(sTexto, iOnde_Comeca + 1, iOndeTermina - 1)
return(sTexto_Quero)
}
scrape_url = "https://statusinvest.com.br/fundos-imobiliarios/xpml11"
flat_html = base::readLines(con = scrape_url, encoding="UTF-8")
PVP = PegarTextoNegrito(flat_html, "P/VP")
print(PVP)
Setor = PegarSetor(flat_html)
print(Setor)
## Poupar tempo na hora de ficar rodando toda vez na hora de criar a pagina
df_todos_fiis = df_todos_fiis_salvo1
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo2
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo3
df_todos_fiis = df_todos_fiis[!is.na(df_todos_fiis$Cotacao),]
df_todos_fiis$MM200Delta = scale(df_todos_fiis$MM200Delta, center = 0) * 100
head(df_todos_fiis)
Tabela_Dinamica = df_todos_fiis %>%
dplyr::group_by(Setor) %>%
dplyr::summarise(.groups = 'drop',
n = n(),
DY12m_median = median(DY12m, na.rm=TRUE),
MM200Delta_median = median(MM200Delta, na.rm=TRUE)
) %>% dplyr::filter(n >= 2) %>% dplyr::arrange(desc(MM200Delta_median)) %>% print(n = Inf)
library(ggplot2)
g = ggplot(Tabela_Dinamica, aes(x=DY12m_median, y=MM200Delta_median)) +
geom_point(size=2, shape=1) +
geom_text(label=Tabela_Dinamica$Setor, hjust=0.45, vjust=1.5) +
xlab('Dividend Yield') +
ylab('MM200Delta') +
geom_hline(yintercept=100, linetype="dashed",color = "black", size=0.5, alpha = .4) +
geom_vline(xintercept=5, linetype="dashed",color = "black", size=0.5, alpha = .4) +
coord_cartesian(xlim = c(0, 11))
print(g)
median(df_todos_fiis$DY12m)
median(df_todos_fiis$DY12m, na.rm=T)
which.max(df_todos_fiis$VALOR_EM_CAIXA)
df_todos_fiis[which.max(df_todos_fiis$VALOR_EM_CAIXA), ]
df_todos_fiis[which.max(df_todos_fiis$MM200Delta), ]
hist(df_todos_fiis$DY12m)
hist(df_todos_fiis$DY12m, breaks = 20)
hist(df_todos_fiis$DY12m, breaks = 100)
summary(df_todos_fiis)
df_todos_fiis$Cotacao / df_todos_fiis$DY12m
df_todos_fiis$PB_Anos = df_todos_fiis$Cotacao / (df_todos_fiis$DY12m * df_todos_fiis$Cotacao)
df_todos_fiis
(df_todos_fiis$DY12m * df_todos_fiis$Cotacao)
df_todos_fiis$PB_Anos = df_todos_fiis$Cotacao / (df_todos_fiis$DY12m / 100 * df_todos_fiis$Cotacao)
df_todos_fiis
View(df_todos_fiis)
knitr::opts_chunk$set(collapse = TRUE,
fig.retina = 2,
fig.align = 'center')
library(emo)
options(width = 180)
load("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
library(mt5R)
library(stringr)
library(dplyr)
MT5.Ping()
head(sTodosTickers)
length(sTodosTickers)
## Filtrar aqueles que verdadeiramente são FIIs
sTodosOsFIIs = sTodosTickers[bQuaisSaoFII]
head(sTodosOsFIIs)
length(sTodosOsFIIs)
PegarTextoNegrito = function(flat_html, sQualIndicador, iQualNaSequencia = 1)
{
# flat_html: é a página obtida pelo base::readLines
# sQualIndicador: qual indicador estamos atrás
# iQualNaSequencia: o indicador pode aparecer diversas vezes na pagina. Escolha em qual você está interessado.
iOnde_AproxIndicador = which(str_detect(flat_html, regex(sQualIndicador, ignore_case = T)))
iOnde_EstaoNegritos = which(str_detect(flat_html, "</strong>"))
sTexto = flat_html[iOnde_EstaoNegritos[iOnde_EstaoNegritos > iOnde_AproxIndicador[iQualNaSequencia]][1]]
iMarcadores = str_locate_all(sTexto, ">")[[1]][,1]
iOndeTermina = str_locate_all(sTexto, "</strong>")[[1]][1]
iOndeComeca = tail(subset(iMarcadores, iMarcadores < iOndeTermina),1)
sTexto_Quero = str_sub(sTexto, iOndeComeca + 1, iOndeTermina - 1)
if(length(sTexto_Quero)<1)sTexto_Quero = NA; ## não achou
return(sTexto_Quero)
}
PegarSetor = function(flat_html)
{
iOnde_AproxIndicador = which(str_detect(flat_html, regex(">Segmento</span>", ignore_case = T)))[1]
iOnde_BarraInversa = which(str_detect(flat_html, '\"'))
sTexto = flat_html[iOnde_BarraInversa[iOnde_BarraInversa > iOnde_AproxIndicador][1]]
iOnde_BarraDir = str_locate_all(sTexto, "/")[[1]]
## Procura por aspas
iOndeTermina = str_locate_all(sTexto, '"')[[1]][2]
iOnde_Comeca = tail(iOnde_BarraDir[iOnde_BarraDir < iOndeTermina],1)
sTexto_Quero = str_sub(sTexto, iOnde_Comeca + 1, iOndeTermina - 1)
return(sTexto_Quero)
}
scrape_url = "https://statusinvest.com.br/fundos-imobiliarios/xpml11"
flat_html = base::readLines(con = scrape_url, encoding="UTF-8")
PVP = PegarTextoNegrito(flat_html, "P/VP")
print(PVP)
Setor = PegarSetor(flat_html)
print(Setor)
## Poupar tempo na hora de ficar rodando toda vez na hora de criar a pagina
df_todos_fiis = df_todos_fiis_salvo1
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo2
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo3
df_todos_fiis = df_todos_fiis[!is.na(df_todos_fiis$Cotacao),]
df_todos_fiis$MM200Delta = scale(df_todos_fiis$MM200Delta, center = 0) * 100
df_todos_fiis$PB_Anos = df_todos_fiis$Cotacao / (df_todos_fiis$DY12m / 100 * df_todos_fiis$Cotacao)
head(df_todos_fiis)
median(df_todos_fiis$DY12m, na.rm=T)
df_todos_fiis[which.max(df_todos_fiis$VALOR_EM_CAIXA), ]
df_todos_fiis[which.max(df_todos_fiis$MM200Delta), ]
Tabela_Dinamica = df_todos_fiis %>%
dplyr::group_by(Setor) %>%
dplyr::summarise(.groups = 'drop',
n = n(),
DY12m_median = median(DY12m, na.rm=TRUE),
MM200Delta_median = median(MM200Delta, na.rm=TRUE)
) %>% dplyr::filter(n >= 2) %>% dplyr::arrange(desc(MM200Delta_median)) %>% print(n = Inf)
library(ggplot2)
g = ggplot(Tabela_Dinamica, aes(x=DY12m_median, y=MM200Delta_median)) +
geom_point(size=2, shape=1) +
geom_text(label=Tabela_Dinamica$Setor, hjust=0.45, vjust=1.5) +
xlab('Dividend Yield') +
ylab('MM200Delta') +
geom_hline(yintercept=100, linetype="dashed",color = "black", size=0.5, alpha = .4) +
geom_vline(xintercept=5, linetype="dashed",color = "black", size=0.5, alpha = .4) +
coord_cartesian(xlim = c(0, 11))
print(g)
median(df_todos_fiis$PB_Anos)
median(df_todos_fiis$PB_Anos, na.rm=T)
View(df_todos_fiis)
df_todos_fiis$PB_Anos = round(df_todos_fiis$Cotacao / (df_todos_fiis$DY12m / 100 * df_todos_fiis$Cotacao), 1)
View(df_todos_fiis)
knitr::opts_chunk$set(collapse = TRUE,
fig.retina = 2,
fig.align = 'center',
comment = "#>")
library(emo)
options(width = 180)
load("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
print(getwd())
write.csv(df_todos_fiis, file = "tabela.csv")
write.csv(df_todos_fiis, file = "tabela_fiis.csv")
print(getwd())
write.csv(df_todos_fiis, file = "tabela_fiis.csv")
write.csv(df_todos_fiis, file = "tabela_fiis.csv")
print(getwd())
write.csv(df_todos_fiis, file = "tabela_fiis.csv", sep = ';')
write.csv2(df_todos_fiis, file = "tabela_fiis.csv", row.names = FALSE)
knitr::opts_chunk$set(collapse = TRUE,
fig.retina = 2,
fig.align = 'center',
comment = "#>")
library(emo)
options(width = 180)
load("C:/Users/GKIN/Desktop/Blog/SuporteTempo.RData")
library(mt5R)
library(stringr)
library(dplyr)
MT5.Ping()
head(sTodosTickers)
length(sTodosTickers)
## Filtrar aqueles que verdadeiramente são FIIs
sTodosOsFIIs = sTodosTickers[bQuaisSaoFII]
head(sTodosOsFIIs)
length(sTodosOsFIIs)
PegarTextoNegrito = function(flat_html, sQualIndicador, iQualNaSequencia = 1)
{
# flat_html: é a página obtida pelo base::readLines
# sQualIndicador: qual indicador estamos atrás
# iQualNaSequencia: o indicador pode aparecer diversas vezes na pagina. Escolha em qual você está interessado.
iOnde_AproxIndicador = which(str_detect(flat_html, regex(sQualIndicador, ignore_case = T)))
iOnde_EstaoNegritos = which(str_detect(flat_html, "</strong>"))
sTexto = flat_html[iOnde_EstaoNegritos[iOnde_EstaoNegritos > iOnde_AproxIndicador[iQualNaSequencia]][1]]
iMarcadores = str_locate_all(sTexto, ">")[[1]][,1]
iOndeTermina = str_locate_all(sTexto, "</strong>")[[1]][1]
iOndeComeca = tail(subset(iMarcadores, iMarcadores < iOndeTermina),1)
sTexto_Quero = str_sub(sTexto, iOndeComeca + 1, iOndeTermina - 1)
if(length(sTexto_Quero)<1)sTexto_Quero = NA; ## não achou
return(sTexto_Quero)
}
PegarSetor = function(flat_html)
{
iOnde_AproxIndicador = which(str_detect(flat_html, regex(">Segmento</span>", ignore_case = T)))[1]
iOnde_BarraInversa = which(str_detect(flat_html, '\"'))
sTexto = flat_html[iOnde_BarraInversa[iOnde_BarraInversa > iOnde_AproxIndicador][1]]
iOnde_BarraDir = str_locate_all(sTexto, "/")[[1]]
## Procura por aspas
iOndeTermina = str_locate_all(sTexto, '"')[[1]][2]
iOnde_Comeca = tail(iOnde_BarraDir[iOnde_BarraDir < iOndeTermina],1)
sTexto_Quero = str_sub(sTexto, iOnde_Comeca + 1, iOndeTermina - 1)
return(sTexto_Quero)
}
scrape_url = "https://statusinvest.com.br/fundos-imobiliarios/xpml11"
flat_html = base::readLines(con = scrape_url, encoding="UTF-8")
PVP = PegarTextoNegrito(flat_html, "P/VP")
print(PVP)
Setor = PegarSetor(flat_html)
print(Setor)
## Poupar tempo na hora de ficar rodando toda vez na hora de criar a pagina
df_todos_fiis = df_todos_fiis_salvo1
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo2
head(df_todos_fiis)
df_todos_fiis = df_todos_fiis_salvo3
df_todos_fiis = df_todos_fiis[!is.na(df_todos_fiis$Cotacao),]
df_todos_fiis$MM200Delta = scale(df_todos_fiis$MM200Delta, center = 0) * 100
df_todos_fiis$PB_Anos = round(df_todos_fiis$Cotacao / (df_todos_fiis$DY12m / 100 * df_todos_fiis$Cotacao), 1)
head(df_todos_fiis)
median(df_todos_fiis$DY12m, na.rm=T)
df_todos_fiis[which.max(df_todos_fiis$VALOR_EM_CAIXA), ]
df_todos_fiis[which.max(df_todos_fiis$MM200Delta), ]
Tabela_Dinamica = df_todos_fiis %>%
dplyr::group_by(Setor) %>%
dplyr::summarise(.groups = 'drop',
n = n(),
DY12m_median = median(DY12m, na.rm=TRUE),
MM200Delta_median = median(MM200Delta, na.rm=TRUE)
) %>% dplyr::filter(n >= 2) %>% dplyr::arrange(desc(MM200Delta_median)) %>% print(n = Inf)
library(ggplot2)
g = ggplot(Tabela_Dinamica, aes(x=DY12m_median, y=MM200Delta_median)) +
geom_point(size=2, shape=1) +
geom_text(label=Tabela_Dinamica$Setor, hjust=0.45, vjust=1.5) +
xlab('Dividend Yield') +
ylab('MM200Delta') +
geom_hline(yintercept=100, linetype="dashed",color = "black", size=0.5, alpha = .4) +
geom_vline(xintercept=5, linetype="dashed",color = "black", size=0.5, alpha = .4) +
coord_cartesian(xlim = c(0, 11))
print(g)
write.csv2(df_todos_fiis, file = "tabela_fiis.csv", row.names = FALSE)
blogdown::build_site()
blogdown::serve_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::serve_site()
source('C:/Users/GKIN/Desktop/Blog/Blog - Site/content/files/SupermercadoFIIs.R', encoding = 'UTF-8')
df_todos_fiis
Setor
df_todos_fiis
source('C:/Users/GKIN/Desktop/Blog/Blog - Site/content/files/SupermercadoFIIs.R', encoding = 'UTF-8')
sTodosOsFIIs
head(df_todos_fiis)
source('C:/Users/GKIN/Desktop/Blog/Blog - Site/content/files/SupermercadoFIIs.R', encoding = 'UTF-8')
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
hugo -v
blogdown::hugo_version()
blogdown::check_hugo()
blogdown::serve_site()
blogdown::hugo_cmd("hugo -v")
blogdown::hugo_cmd("-v")
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::new_post("Teste", ext = '.Rmd')
blogdown::build_site()
blogdown::serve_site()
blogdown::stop_server()
blogdown::build_site()
blogdown::new_post("Listar FIIs", ext = '.Rmd')
blogdown::build_site()
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::serve_site()
blogdown::build_site()
blogdown::build_site()
blogdown::new_post("Teste", ext = '.Rmd')
blogdown::serve_site()
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown:::insert_image_addin()
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::new_post("Teste 3", ext = '.Rmd')
blogdown::build_site()
blogdown::stop_server()
blogdown:::preview_site()
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::build_site()
blogdown::serve_site()
blogdown::build_site()
blogdown::serve_site()
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::build_site()
blogdown::new_post("Teste 4", ext = '.Rmd')
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::stop_server()
blogdown::build_site()
blogdown::new_post("Teste 5", ext = '.Rmd')
blogdown:::preview_site()
blogdown::build_site()
blogdown::new_post("Teste 6", ext = '.Rmd')
blogdown::build_site()
blogdown::new_post("1_Listando_FII", ext = '.Rmd')
blogdown::build_site()
blogdown::hugo_cmd("--cleanDestinationDir")
blogdown::serve_site()
source('C:/Users/GKIN/Desktop/Blog/Blog - Site/content/files/SupermercadoFIIs.R', encoding = 'UTF-8')
Cotacao
source('C:/Users/GKIN/Desktop/Blog/Blog - Site/content/files/SupermercadoFIIs.R', encoding = 'UTF-8')
